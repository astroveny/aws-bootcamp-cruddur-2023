AWSTemplateFormatVersion: "2010-09-09"

Description: |
  The networking and cluster configuration to support fargate containers
  - ECS Fargate Cluster
  - Application Load Balancer (ALB)
    - ipv4
    - internet facing
  - ALB Security Group
  - HTTPS Listener 
    - send naked domain to frontend target group
    - send api. subdomain to backend target group
  - HTTP Listener
    - redirect to HTTPS listener
  - Backend Target group
  - Frontend Target group

Parameters:

  CertificateArn:
    Type: String

  # >> Frontend 
  FrontendHCInterval:
    FrontendPort:
      Type: Number
      Default: 3000
    # Health Check
    FrontendHealthCheckPath: 
      Type: String
      Defualt: "/"
    FrontendHealthCheckPort: 
      Type: String
      Defualt: 80
    FrontendHealthCheckProtocol: 
      Type: String
      Defualt: HTTP
    FrontendHealthCheckTimeoutSeconds: 
      Type: Number
      Defualt: 5
    FrontendHealthyThresholdCount: 
      Type: Number
      Defualt: 2
    FrontendHealthCheckIntervalSeconds: 
      Type: Number
      Defualt: 10
    FrontendUnhealthyThresholdCount:
      Type: Number
      Default: 2
    
  # >> Backend 
  BackendHCInterval:
    BackendPort:
      Type: Number
      Default: 4567
    # Health Check
    BackendHealthCheckPath: 
      Type: String
      Defualt: "/api/health-check"
    HBackendealthCheckPort: 
      Type: String
      Defualt: 80
    BackendHealthCheckProtocol: 
      Type: String
      Defualt: HTTP
    BackendHealthCheckTimeoutSeconds: 
      Type: Number
      Defualt: 5
    BackendHealthyThresholdCount: 
      Type: Number
      Defualt: 2
    BackendHealthCheckIntervalSeconds: 
      Type: Number
      Defualt: 10
    BackendUnhealthyThresholdCount:
      Type: Number
      Default: 2

Resources:
  ECSCluster: #LogicalName
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub "${AWS::StackName}FargateCluster"
      CapacityProviders:
        - FARGATE
    ClusterSettings:
        - Name: containerInsights
          Value: enabled
    Configuration:
      ExecuteCommandConfiguration:
        # KmsKeyId: !Ref KmsKeyId
        Logging: DEFAULT
    ServiceConnectDefaults:
      Namespace: cruddur

  ALB:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: !Sub "${AWS::StackName}ALB"
      Type: application
      IpAddressType: ipv4
      Schema: internet-facing
      SecurityGroups:
        - !Ref ALBSG
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticloadbalancingv2-loadbalancer-loadbalancerattributes.html
      LoadBalancerAttributes:
        - Name: routing.http2.enabled
          Value: true
        - Name: routing.http.preserve_host_header.enabled
          Value: false
        - Name: deletion_protection.enabled
          Value: true
        - Name: load_balancing.cross_zone.enabled
          Value: true
        - Name: access_logs.s3.enabled
          Value: false
        # In-case we want to turn on logs
        # - Name: access_logs.s3.bucket
        #   Value: bucket-name
        # - Name: access_logs.s3.prefix
        #   Value: ""

  HTTPSListener:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties: 
      Protocol: HTTPS
      Port: 443
      LoadBalancerArn: !Ref ALB
      Certificates:
        - CertificateArn: !Ref CertificateArn 
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTG     

  HTTPListener: 
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:    
      Protocol: HTTP
      Port: 80
      LoadBalancerArn: !Ref ALB
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"

  ApiALBListernerRule:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions: 
        - Field: host-header
          HostHeaderConfig: 
            Values: 
              - api.awsbc.flyingresnova.com
      Actions: 
        - Type: forward
        ForwardConfig:
          TargetGroups:
            - TargetGroupArn: !Ref BackendTG
      ListenerArn: !Ref HTTPSListener
      Priority: 1
  
  ALBSG:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}ALBSG"
      GroupDescription: Public facing SG for our Cruddur ALB
      VpcId: Ref: myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: INTERNET HTTPS
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: INTERNET HTTP

  BackendTG:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}BackendTG"
      Port: !Ref BackendPort
      HealthCheckEnabled: true
      HealthCheckProtocol: !Ref BackendHealthCheckProtocol
      HealthCheckIntervalSeconds: !Ref BackendHealthCheckIntervalSeconds
      HealthCheckPath: !Ref BackendHealthCheckPath
      HealthCheckPort: !Ref BackendHealthCheckPort
      HealthCheckTimeoutSeconds: !Ref BackendHealthCheckTimeoutSeconds
      HealthyThresholdCount: !Ref BackendHealthyThresholdCount
      UnhealthyThresholdCount: !Ref BackendUnhealthyThresholdCount
      IpAddressType: ipv4
      Matcher: 
        HttpCode: 200
      Protocol: HTTP
      ProtocolVersion: HTTP2
      TargetGroupAttributes: 
        - Key: deregistration_delay.timeout_seconds
          Value: 0
      VpcId:
        Fn::ImportValue:
          !Sub ${NetworkingStack}VpcId
          
  FrontendTG:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}FrontendTG"
      Port: !Ref FrontendPort
      HealthCheckEnabled: true
      HealthCheckProtocol: !Ref FrontendHealthCheckProtocol
      HealthCheckIntervalSeconds: !Ref FrontendHealthCheckIntervalSeconds
      HealthCheckPath: !Ref FrontendHealthCheckPath
      HealthCheckPort: !Ref FrontendHealthCheckPort
      HealthCheckTimeoutSeconds: !Ref FrontendHealthCheckTimeoutSeconds
      HealthyThresholdCount: !Ref FrontendHealthyThresholdCount
      UnhealthyThresholdCount: !Ref FrontendUnhealthyThresholdCount
      IpAddressType: ipv4
      Matcher: 
        HttpCode: 200
      Protocol: HTTP
      ProtocolVersion: HTTP2
      TargetGroupAttributes: 
        - Key: deregistration_delay.timeout_seconds
          Value: 0
      VpcId:
        Fn::ImportValue:
          !Sub ${NetworkingStack}VpcId
      
  
            
        
        


Outputs: